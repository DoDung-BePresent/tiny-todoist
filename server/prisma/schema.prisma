generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  name        String?
  avatar      String?

  // Relations
  accounts    Account[]
  tasks       Task[]
  projects    Project[]
  comments    Comment[]
  reactions   Reaction[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("users")
}

model Account {
  id                  String    @id @default(cuid())
  userId              String
  type                AccountType
  provider            Provider
  providerAccountId   String

  // Credentials
  password            String?

  // OAuth
  refresh_token       String?   @db.Text
  access_token        String?   @db.Text
  expires_at          Int?

  // Relations
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)    
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Project {
  id          String    @id @default(cuid())
  name        String
  color       String
  isFavorite  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  tasks       Task[]

  @@map("projects")
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  completed   Boolean   @default(false)
  dueDate     DateTime?
  priority    Priority  @default(P4)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  projectId   String?
  project     Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)

  parentId    String?
  parent      Task?     @relation("Subtasks", fields: [parentId], references: [id], onDelete: Cascade)
  subtasks    Task[]    @relation("Subtasks")

  comments    Comment[]

  @@index([userId])
  @@map("tasks")
}

model Comment {
  id          String        @id @default(cuid())
  content     String?       @db.Text
  type        CommentType   @default(TEXT)
  fileUrl     String?
  fileName    String?
  fileType    String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  taskId      String
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  reactions   Reaction[]

  @@map("comments")
}

model Reaction {
  id          String    @id @default(cuid())
  emoji       String
  createdAt   DateTime  @default(now())

  // Relation
  commentId   String
  comment     Comment   @relation(fields: [commentId], references: [id], onDelete: Cascade)

  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId, emoji])
  @@map("reactions")
}

model EmailVerificationToken {
  id           String   @id @default(cuid())
  token        String   @unique
  email        String   
  passwordHash String   
  name         String? 
  expiresAt    DateTime 

  createdAt DateTime @default(now())
}

enum AccountType {
  oauth
  credentials
}

enum Provider {
  github
  credentials
}

enum Priority {
  P1 // Urgent
  P2 // High
  P3 // Medium
  P4 // Low
}

enum CommentType {
  TEXT
  MEDIA
  VOICE
}

